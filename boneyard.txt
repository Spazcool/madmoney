
      <div className="Item">
          <Section
            data={this.props.data}
            loaded={this.props.loaded}
            path={this.props.path}
          />
          <Sections
            data={this.props.data}
            loaded={this.props.loaded}
          />
          {this.props.path === '/' ? <Mission/> : ''}
      </div>
      
  <Switch>
    <Route exact path="/">
      <Page
        data={this.state.posts}
        displayBoth={true}
        docs={this.state.docs}
        loaded={this.state.loaded}
        path={"/"}
        tools={this.state.tools}
      />
    </Route>
    <Route exact path="/tools/calcul">
      <Page
        data={this.state.tools}
        displayBoth={true}
        docs={this.state.docs}
        loaded={this.state.loaded}
        path={"/tools/calcul"}
        tools={this.state.tools}
      />
    </Route>
    <Route path="/blogs" render={(props) => (
      <Page
        data={this.state.posts}
        displayBoth={false}
        docs={this.state.docs}
        loaded={this.state.loaded}
        tools={this.state.tools}/>
    )}/>
    <Route path="/docs" component={this.nestURLs}/>
    <Route path="/tools" component={this.nestURLs}/>
  </Switch>




<div className="navbar-menu" id="sibling-menu">
  <div className="navbar-item has-dropdown is-hoverable">
    <a className="navbar-link" href="/docs"><span className="icon"><i className="fas fa-book"></i></span> Docs</a>
    <div className="navbar-dropdown">
      {sections}
    </div>
  </div>
</div>;


sections =
  this.props.data.map(({fields}, index) =>
    <a href={fields.path} className="navbar-item" style={{textDecoration: 'none'}} key={fields.title}>
      <div>{fields.title}</div>
      <div>{fields.date}</div>
    </a>);






{Object.keys(this.props.output).filter(output =>
output !== "cashFlow" &&
output !== "notaryFee" &&
output !== "yieldNet").map((output, index) =>
  <div className="tile is-child control box" key={output + index}>
    <div className="answer">
      <label className="label">{output}</label>
      <h1 className="embiggen">{this.props.output[output]}</h1>
    </div>
  </div>
)}

{Object.keys(this.props.output).filter(output =>
output !== "annualExpenses" &&
output !== "annualRent" &&
output !== "notaryFee" &&
output !== "totalPurchase").map((output, index) =>
  <div className="tile is-child control box" key={output + index}>
    <div className="answer">
      <label className="label">{output}</label>
      <h1 className="embiggen">{this.props.output[output]}</h1>
    </div>
  </div>
)}

{Object.keys(this.props.output).filter(output =>
output ).map((output, index) =>
  <div className=" control" key={output + index}>
    <div className="answer">
      <label className="label">{output}</label>
      <h1 className="embiggen">{this.props.output[output]}</h1>
    </div>
  </div>
)}






let annualExpenses = _frais.monthlyExpenses * 12;
let annualRent = _revenus.monthlyRent * 12 - _revenus.monthlyRent * _revenus.lostMonthes;
let totalPrice = parseInt(_prix.basePrice, 10) + _prix.basePrice * notaryFee + parseInt(_prix.repairCosts, 10);
let brutYield = annualRent / totalPrice * 100;
let netYield = (annualRent - annualExpenses) / totalPrice * 100;
let monthlyCashFlow = (annualRent - annualExpenses) / 12 - _frais.monthlyMortgage;
let totalPurchase = parseInt(_prix.basePrice, 10) + parseInt(_prix.repairCosts, 10) + notaryFee;





// if(event.target.name in this.state.frais){
//   let _frais = Object.assign({}, this.state.frais);
//   _frais[event.target.name] = event.target.value;
//   this.setState({
//     frais: _frais,
//   });
// }else if(event.target.name in this.state.prix){
//   let _prix = Object.assign({}, this.state.prix);
//   if(event.target.name === "oldProperty"){
//     _prix[event.target.name] = this.state.prix.oldProperty ? false : true;
//   }else{
//     _prix[event.target.name] = event.target.value;
//   }
//   this.setState({
//     prix: _prix,
//   });
// }else if(event.target.name in this.state.revenus){
//   let _revenus = Object.assign({}, this.state.revenus);
//   _revenus[event.target.name] = event.target.value;
//   this.setState({
//     revenus: _revenus,
//   });
// }











let switcher =
  <div className="control">
    <label className="label">Old Property</label>
    <div className="field">
      <input
        id="switchExample"
        onChange={this.handleChange}
        type="checkbox"
        name="oldProperty"
        className="switch"
        checked={this.state.prix.oldProperty === true ? false : true}
      />
    <label htmlFor="switchExample"></label>
    </div>
  </div>;
let frais =
  <div className="field">
    <h2>Frais</h2>
    {Object.keys(this.state.frais).map((input, index) =>
      <div className="control" key={input}>
        <label className="label">{input}</label>
        <input
          className="input"
          name={input}
          onChange={this.handleChange}
          type="number"
          value={this.state.frais[input]}
        />
      </div>
    )}
  </div>;
let prix =
  <div className="field">
    <h2>Prix</h2>
    {Object.keys(this.state.prix).filter((input) =>
      input !== 'oldProperty').map((input, index) =>
      <div className="control" key={input}>
        <label className="label">{input}</label>
        <input
          className="input"
          name={input}
          onChange={this.handleChange}
          type="number"
          value={this.state.prix[input]}
        />
      </div>
    )}
    {switcher}
  </div>;
let revenus =
  <div className="field">
    <h2>Revenus</h2>
    {Object.keys(this.state.revenus).map((input, index) =>
      <div className="control" key={input}>
        <label className="label">{input}</label>
        <input
          className="input"
          name={input}
          onChange={this.handleChange}
          type="number"
          value={this.state.revenus[input]}
        />
      </div>
    )}
  </div>;






<div className="field">
  <div className="control">
    <button className="button is-link" onClick={(e) => {
        this.calculateYield(
          this.state.prix.oldProperty,
          this.state.prix.basePrice,
          this.state.revenus.lostMonthes,
          this.state.frais.monthlyExpenses,
          this.state.frais.monthlyMortgage,
          this.state.revenus.monthlyRent,
          this.state.prix.repairCosts);
        }}>Submit</button>
  </div>
</div>




let radios = [];
for (let i = 0; i < 2; i++) {
  radios.push(
    <label className="radio" key={"oldProperty"+i}>
      <input
        checked={this.state.oldProperty === (i === 0 ? true : false)}
        name="oldProperty"
        onChange={this.handleChange}
        type="radio"
        value={i === 0 ? true : false}
      />
      {i === 0 ? "Yes" : "No"}
    </label>
  );
}




// console.log('here', this.state);
// const rows = ["rowOne", "rowTwo", "rowThree"];
// let inputs =
//   rows.map((row, rowIndex) =>
//     <div className={row + " field is-grouped is-grouped-multiline"} key={row + rowIndex}>
//       {Object.keys(this.state).filter((input) =>
//         input !== 'data' &&
//         input !== 'oldProperty').filter((input, filterIndex)=>
//         filterIndex % 3 === rowIndex).map((input, index) =>
//         <div className="control" key={input + index}>
//           <label className="label">{input}</label>
//           <input
//             className="input"
//             name={input}
//             onChange={this.handleChange}
//             type="number"
//             value={this.state[input]}
//           />
//         </div>
//       )}
//     </div>
//   );





// let inputs = [];
// for (let i = 0; i < Object.keys(this.state).length; i++) {
//   if(i % 2 === 0){
//     inputs.push(
//       Object.keys(this.state)[i]
//     )
//   }
//
//   console.log(inputs);
// };
// let inputs = Object.keys(this.state).filter(input =>
//   input !== 'data' && input !== 'oldProperty').map((input, index) =>
//   // TODO COUPLE THESE INPUT FIELDS
//   <div className="control" key={input + index}>
//     <label className="label">{input}</label>
//     <input
//       className="input"
//       name={input}
//       onChange={this.handleChange}
//       type="number"
//       value={this.state[input]}
//     />
//   </div>);


<div className="control">
  <div className="answer">
    <label className="label">Brut</label>
    {this.state.data.brut}
  </div>
</div>
<div className="control">
  <div className="answer">
    <label className="label">Net</label>
    {this.state.data.net}
  </div>
</div><div className="control">
  <div className="answer">
    <label className="label">Monthly Cash Flow</label>
    {this.state.data.cashFlow}
  </div>
</div>



<div className="field is-grouped">
  <div className="control">
    <label className="label">Price w/out Fees</label>
    <input
      className="input"
      name="basePrice"
      onChange={this.handleChange}
      type="number"
      value={this.state.basePrice}
    />
  </div>
  <div className="control">
    <label className="label">Initial Repair Costs</label>
    <input
      className="input"
      name="repairCosts"
      onChange={this.handleChange}
      type="number"
      value={this.state.repairCosts}
    />
  </div>
</div>
<div className="field is-grouped">
  <div className="control">
    <label className="label">Monthly Expenses</label>
    <input
      className="input"
      name="monthlyExpenses"
      onChange={this.handleChange}
      type="number"
      value={this.state.monthlyExpenses}
    />
  </div>
  <div className="control">
    <label className="label">Monthly Mortgage</label>
    <input
      className="input"
      name="monthlyMortgage"
      onChange={this.handleChange}
      type="number"
      value={this.state.monthlyMortgage}
    />
  </div>
</div>
<div className="field is-grouped">
  <div className="control">
    <label className="label">Monthly Rent</label>
    <input
      className="input"
      name="monthlyRent"
      onChange={this.handleChange}
      type="number"
      value={this.state.monthlyRent}
    />
  </div>
  <div className="control">
    <label className="label">Vacant Monthes</label>
    <input
      className="input"
      name="lostMonthes"
      onChange={this.handleChange}
      type="number"
      value={this.state.lostMonthes}
    />
  </div>
</div>































        <div className="field">
          <label className="label">Extra Stuff</label>
        </div>

        <div className="field">
          <label className="label">Variable List</label>
          <div className="control">
            <div className="select">
              <select>
                <option>List Item A</option>
                <option>List Item B</option>
                <option>List Item C</option>
              </select>
            </div>
          </div>
        </div>

        <div className="field">
          <div className="control">
            <label className="checkbox">
              <input type="checkbox"/>
              I agree to the <a href="">terms and conditions</a>
            </label>
          </div>
        </div>

        <div className="field">
          <div className="control">
            <label className="radio">
              <input className="radio" name="question"/>
              Yes
            </label>
            <label className="radio">
              <input type="radio" name="question"/>
              No
            </label>
          </div>
        </div>

        <div className="field is-grouped">
          <div className="control">
            <button className="button is-link">Submit</button>
          </div>
          <div className="control">
            <button className="button is-text">Cancel</button>
          </div>
        </div>
